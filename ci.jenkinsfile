#!groovy
@Library('jenkinslib@master')_
def build=new org.devops.build()
def tools=new org.devops.tools()
def gitlab = new org.devops.gitlab()
def toemail= new org.devops.toemail()
def sonar= new org.devops.sonarqube()
def sonarapi= new org.devops.sonarapi()
def nexus=new org.devops.nexus()
def artifactory=org.devops.artifactory()
def runOpts
//env
String buildShell="${env.buildShell}"
String buildType="${env.buildType}"
String srcUrl="${env.srcUrl}"
String artifactUrl="${env.artifactUrl}"
 if("${runOpts}"=="GitlabPush"){
        branchName=branch-"refs/heads/"
        currentBuild.description="Triger by ${username} ${branch}"
        gitlab.ChangeCommitStatus(projectId,commitSha,"running")
    }else{
        userEmail="zzyy8678@qq.com"
    }


pipeline{
    agent any
    stages{
        stage("checkout_git_code"){
            steps{
                script{
                    println("${branchName}")
                    tools.PrintMes("<=======分支名称是：${branchName}==============>","green")
                    tools.PrintMes("<=========================获取代码===========================>","green")
                    checkout scmGit(branches: [[name: "${branchName}"]], extensions: [], userRemoteConfigs: [[credentialsId: '0a643cef-c275-43e6-ab2a-9b1aa2558f3f', url: "${srcUrl}"]])
                }
            }
        }
        stage("Build"){
            steps{
                script{
                      tools.PrintMes("<======================执行打包===========================>","green")
                     // build.Build(buildType,buildShell)
                     artifactory.main(buildType,buildShell)
                      tools.PrintMes("<======================上传制品===========================>","green")
artifactory.PushArtifact()
                      //nexus.main("nexus")
                      //tools.PrintMes("<======================发布制品===========================>","green")
                      //sh "/usr/local/bin/wget ${artifactUrl}&&ls&&pwd"


                }
            }
        }
        /*stage("QA"){
            steps{
                script{ 
                    //搜索项目是否存在
                    tools.PrintMes("搜索项目是否存在","green")
                    result=sonarapi.SerarchProject("${JOB_NAME}")
                    println(result)
                    if(result=="false"){
                        println("${JOB_NAME}----项目不存在,准备创建------>${JOB_NAME}")
                        sonarapi.CreateProject("${JOB_NAME}")
                    }else{
                        println("${JOB_NAME}---->项目已存在")
                    }
                    //都要配置质量规则
                    tools.PrintMes("<=========配置质量规则============>","green")
                    //规则名称按照项目名来划分
                    qpName="${JOB_NAME}".split("-")[0]
                    sonarapi.ConfigQualityProfiles("${JOB_NAME}","java",qpName )
                    //获取质量阈
                    tools.PrintMes("<=========配置质量阈============>","green")
                    sonarapi.ConfigQualityGates("${JOB_NAME}",qpName)

                    tools.PrintMes("<==============代码扫描=============>","green1")
                    sonar.SonarScan("test","${JOB_NAME}","${JOB_NAME}","src")
                    sleep(30)
                    tools.PrintMes("获取扫描结果","green")  
                    result = sonarapi.GetProjectStatus("${JOB_NAME}")  
                    println(result)
                    if (result.toString() == "ERROR"){
                        toemail.Email("代码质量阈错误！请及时修复！",userEmail)
                        error " 代码质量阈错误！请及时修复！"
                        
                        
                    } else {
                        println(result)
                    }            
                }
            }
        }*/

    }
    /*post{
        always{
            script{
                tools.PrintMes("<======================always===========================>","green")
            }
        }
        success{
            script{
                tools.PrintMes("<======================success===========================>","green")
                if ("${runOpts}" == "GitlabPush"){
                    gitlab.ChangeCommitStatus(projectId,commitSha,"success")                
                }
                toemail.Email("流水线构建成功",userEmail)
            }
        }
        failure{
            script{
                tools.PrintMes("<======================failure===========================>","green")
                if ("${runOpts}" == "GitlabPush"){
                    gitlab.ChangeCommitStatus(projectId,commitSha,"failed")               
                }
                toemail.Email("流水线构建失败",userEmail)
            }
        }
        aborted{
            script{
                tools.PrintMes("<======================aborte===========================>","green")
                if ("${runOpts}" == "GitlabPush"){
                    gitlab.ChangeCommitStatus(projectId,commitSha,"canceled")
                   
                }
                toemail.Email("流水线构建取消",userEmail)
            }
        }
    }*/
}



